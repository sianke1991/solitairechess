"use strict";/*@author sianke1991*/class AreaType{constructor(t,e){this._ordinal=t,this._name=e}get ordinal(){return this._ordinal}get name(){return this._name}static values(){return[AreaType.RECT,AreaType.CIRCLE]}toString(){return this.name}equals(t){return null!==t&&this.ordinal===t.ordinal}}AreaType.RECT=new AreaType(0,"RECT"),AreaType.CIRCLE=new AreaType(1,"CIRCLE");class RectArea{constructor(){this._leftEnd=0,this._topEnd=0,this._horizontalSize=0,this._verticalSize=0}static get TYPE(){return RectArea._TYPE}_dealWithNegativeSize(){return this._horizontalSize<0&&(this._leftEnd+=this._horizontalSize,this._horizontalSize*=-1),this._verticalSize<0&&(this._topEnd+=this._verticalSize,this._verticalSize*=-1),this}get type(){return RectArea.TYPE}get leftEnd(){return this._leftEnd}get topEnd(){return this._topEnd}get centerX(){return this.leftEnd+this.horizontalSize/2}get centerY(){return this.topEnd+this.verticalSize/2}get horizontalSize(){return this._horizontalSize}get verticalSize(){return this._verticalSize}get rightEnd(){return this.leftEnd+this.horizontalSize}get bottomEnd(){return this.topEnd+this.verticalSize}containsPoint(t,e){return t>=this.leftEnd&&t<=this.rightEnd&&e>=this.topEnd&&e<=this.bottomEnd}set leftEnd(t){this._leftEnd=t}set topEnd(t){this._topEnd=t}set centerX(t){this.horizontalSize=2*(t-this.leftEnd)}set centerY(t){this.verticalSize=2*(t-this.topEnd)}set horizontalSize(t){this._horizontalSize=t,this._dealWithNegativeSize()}set verticalSize(t){this._verticalSize=t,this._dealWithNegativeSize()}set rightEnd(t){this.horizontalSize=t-this.leftEnd}set bottomEnd(t){this.verticalSize=t-this.topEnd}}RectArea._TYPE=AreaType.RECT;class CircleArea{constructor(){this._centerX=0,this._centerY=0,this._diameter=0}static get TYPE(){return CircleArea._TYPE}_dealWithNegativeSize(){return this._diameter=Math.abs(this._diameter),this}get radius(){return this._diameter/2}get type(){return CircleArea.TYPE}get leftEnd(){return this.centerX-this.radius}get topEnd(){return this.centerY-this.radius}get centerX(){return this._centerX}get centerY(){return this._centerY}get horizontalSize(){return this._diameter}get verticalSize(){return this._diameter}get rightEnd(){return this.centerX+this.radius}get bottomEnd(){return this.centerY+this.radius}containsPoint(t,e){t-=this.centerX,e-=this.centerY;return Math.sqrt(t*t+e*e)<=this.radius}set leftEnd(t){this.horizontalSize=2*(this.centerX-t)}set topEnd(t){this.verticalSize=2*(this.centerY-t)}set centerX(t){this._centerX=t}set centerY(t){this._centerY=t}set horizontalSize(t){this._diameter=t,this._dealWithNegativeSize()}set verticalSize(t){this._diameter=t,this._dealWithNegativeSize()}set rightEnd(t){this.horizontalSize=2*(t-this.centerX)}set bottomEnd(t){this.verticalSize=2*(t-this.centerY)}}CircleArea._TYPE=AreaType.CIRCLE;