"use strict";/*@author sianke1991*/class Solver{constructor(){}solve(e,r){var t=currentTime(),i=new Set,o=[];for(i.add(e.toString()),o.push(new SolverNode(e,new MoveHistory));0!==o.length;){var n=o.shift();if(void 0===n)return[];var s,a=n.board;if(a.hasSinglePiece())return[n.moveHistory];if(currentTime()-t>=Solver._MAX_DELAY)throw new Error("Puzzle solving interrupted.");for(s of a.possibleCapturingMoves(r)){var l=n.board,u=n.moveHistory;l.moveBySolver(s,u),i.has(l.toString())||(i.add(l.toString()),o.push(new SolverNode(l,u)))}}return[]}}Solver._MAX_DELAY=3500;class SolverNode{constructor(e,r){this._board=e.clone(),this._moveHistory=r.clone()}get board(){return this._board.clone()}get moveHistory(){return this._moveHistory.clone()}}class Board{constructor(e){this._boardMap=void 0===e?new Map:new Map(e)}putPieceAt(e,r){return this._boardMap.set(e,r),this}removePieceAt(e){return this._boardMap.delete(e),this}_numReversedPawns(){let e=0;for(var r of this._boardMap)r[1]===Piece.REVERSED_PAWN&&e++;return e}numPieces(){return this._boardMap.size-this._numReversedPawns()}isEmpty(){return 0===this.numPieces()}hasSinglePiece(){return 1===this.numPieces()}hasMultiplePieces(){return 1<this.numPieces()}pieceAt(e){e=this._boardMap.get(e);return void 0===e?null:e}isOccupiedAt(e){return this._boardMap.has(e)}isEmptyAt(e){if(e instanceof Square)return!this.isOccupiedAt(e);for(var r of e)if(this.isOccupiedAt(r))return!1;return!0}toString(){let e="",r=0;for(var t of Square.NATURAL_ORDER_LIST){t=this.pieceAt(t);e+=null===t?Piece.VOID_PIECE_ABBREVIATION:t.abbreviation,++r%Square.NUM_COLS==0&&(e+="\n")}return e}static fromString(e){var r=removeWhiteSpaces(e).split("");if(r.length!==Square.NATURAL_ORDER_LIST.length)return null;var t=new Board;for(let e=0;e<r.length;e++){var i=r[e];if(i!==Piece.VOID_PIECE_ABBREVIATION){i=Piece.fromAbbreviation(i);if(null===i)return null;var o=Square.NATURAL_ORDER_LIST[e];t.putPieceAt(o,i)}}return t}clone(){return new Board(this._boardMap)}load(e){this._boardMap.clear();for(var r of e._boardMap)this.putPieceAt(r[0],r[1]);return this}invalidTypeToCapture(e,r){var t=this.pieceAt(e.from),i=this.pieceAt(e.to);return null===t?InvalidMoveType.MOVE_VOID_PIECE_NOT_ALLOWED:null===i?InvalidMoveType.MOVE_WITHOUT_CAPTURES_NOT_ALLOWED:e.isValidFor(t)?(e=e.passingSquares(),this.isEmptyAt(e)?Piece.KING.equals(i)&&KingCapturable.KING_CANNOT_BE_CAPTURED.equals(r.kingCapturable)?InvalidMoveType.KING_CANNOT_BE_CAPTURED:Piece.REVERSED_PAWN.equals(t)?InvalidMoveType.REVERSED_PAWN_CANNOT_CAPTURE:null:InvalidMoveType.JUMP_PIECES_NOT_ALLOWED):InvalidMoveType.INCOMPATABLE_WITH_PIECE}invalidTypeToGenerate(e){var r=this.pieceAt(e.from),t=this.pieceAt(e.to);return null===r?InvalidMoveType.MOVE_VOID_PIECE_NOT_ALLOWED:null!==t?InvalidMoveType.MOVE_WITH_CAPTURES_NOT_ALLOWED:e.isValidFor(r)?(t=e.passingSquares(),this.isEmptyAt(t)?Piece.PAWN.equals(r)?InvalidMoveType.PAWN_CANNOT_GENERATE:null:InvalidMoveType.JUMP_PIECES_NOT_ALLOWED):InvalidMoveType.INCOMPATABLE_WITH_PIECE}possibleCapturingMovesFrom(e,r){var t,i=[];for(t of Move.of(e))null===this.invalidTypeToCapture(t,r)&&i.push(t);return i}possibleCapturingMoves(e){let r=[];for(var t of this._boardMap)r=r.concat(this.possibleCapturingMovesFrom(t[0],e));return r}_possibleGeneratingMovesFrom(e){var r,t=[];for(r of Move.of(e))null===this.invalidTypeToGenerate(r)&&t.push(r);return t}possibleGeneratingMoves(){let e=[];for(var r of this._boardMap)e=e.concat(this._possibleGeneratingMovesFrom(r[0]));return shuffleArray(e),e}moveByPlayer(e,r,t,i,o){var n=Move.of(e,r);return 0===n.length?InvalidMoveType.INCOMPATABLE_WITH_PIECE:(n=n[0],null!==(t=this.invalidTypeToCapture(n,t))?t:null===(t=this.pieceAt(e))?InvalidMoveType.MOVE_VOID_PIECE_NOT_ALLOWED:(i.push(this),this.removePieceAt(e),this.putPieceAt(r,t),o.push(n),null))}undo(e,r){var t;return!e.isEmpty()&&!r.isEmpty()&&null!==(t=e.recentBoard())&&(e.pop(),this.load(t),r.pop(),!0)}moveBySolver(e,r){var t=this.pieceAt(e.from);return null!==t&&(this.removePieceAt(e.from),this.putPieceAt(e.to,t),r.push(e)),this}moveByHint(e,r,t){var i=this.pieceAt(e.from);return null!==i&&(r.push(this),this.removePieceAt(e.from),this.putPieceAt(e.to,i),t.push(e)),this}moveByGenerator(e,r,t){var i,t=t.pickOne();return null!==t&&null!==(i=this.pieceAt(e.from))&&(this.putPieceAt(e.to,i),this.putPieceAt(e.from,t),r.push(e),!0)}nextMove(e){e=Board._SOLVER.solve(this,e);return 0===e.length?null:e[0].moveAt(0)}solution(e){e=Board._SOLVER.solve(this,e);return 0===e.length?null:e[0]}flipPawns(){for(var e of this._boardMap)switch(e[1].ordinal){case Piece.PAWN.ordinal:this.putPieceAt(e[0],Piece.REVERSED_PAWN);break;case Piece.REVERSED_PAWN.ordinal:this.putPieceAt(e[0],Piece.PAWN)}return this}removeReversedPawns(){var e,r,t=[];for(e of this._boardMap)Piece.REVERSED_PAWN.equals(e[1])&&t.push(e[0]);for(r of t)this.removePieceAt(r);return this}}Board._SOLVER=new Solver;class BoardHistory{constructor(e){this._boardStack=void 0===e?[]:[...e]}size(){return this._boardStack.length}isEmpty(){return 0===this.size()}clear(){return clearArray(this._boardStack),this}pop(){return this._boardStack.pop(),this}push(e){return this._boardStack.push(e.clone()),this}recentBoard(){var e=this.size();return 0===e?null:this._boardStack[e-1]}boardAt(e){var r=this.size();return!Number.isInteger(e)||r<=e||e<0?null:this._boardStack[e]}clone(){return new BoardHistory(this._boardStack)}toString(){return this._boardStack.toString()}}class Generator{constructor(){}static get MAX_NUM_PIECES(){return Generator._MAX_NUM_PIECES}static get MIN_NUM_PIECES(){return Generator._MIN_NUM_PIECES}generate(e,r,t){if(r<Generator.MIN_NUM_PIECES)throw new Error(`The argument targetNumPieces must not less than ${Generator.MIN_NUM_PIECES}.`);if(r>Generator.MAX_NUM_PIECES)throw new Error(`The argument targetNumPieces must not greater than ${Generator.MAX_NUM_PIECES}.`);if(!t.isEmpty())throw new Error("The argument solution must be empty.");var i=new Board,o=new PieceDeck(e),n=new MoveHistory,e=Square.randomInstance(),s=o.pickOneFor(e);null!==s&&i.putPieceAt(e,s);for(let e=1;e<r;e++){var a=i.possibleGeneratingMoves();if(0===a.length)break;let r=0;for(let e=0;e<a.length;e++){var l=a[e];if(l.isRanged||l.isValidFor(Piece.KNIGHT)){r=e;break}}if(!i.moveByGenerator(a[r],n,o))break}for(;!n.isEmpty();){var u=null==(u=n.recentMove())?void 0:u.flippedMove();if(null==u)break;t.push(u),n.pop()}return i.flipPawns()}}Generator._MAX_NUM_PIECES=10,Generator._MIN_NUM_PIECES=2;